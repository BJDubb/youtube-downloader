import Head from 'next/head'
import { useRouter } from 'next/router'
import { useEffect, useState } from 'react'
import { saveAs } from 'file-saver';
import { VolumeUpIcon, FilmIcon, PencilAltIcon, DownloadIcon } from '@heroicons/react/solid';
import TagModal from './components/TagModal';


export default function Home() {

  const router = useRouter()
  const [video, setVideo] = useState()
  const [showDownload, setShowDownload] = useState(true)
  const [downloading, setDownloading] = useState(false)
  const [audioBlob, setAudioBlob] = useState()
  const [showTagModal, setShowTagModal] = useState(false)
  const [imageArrayBuffer, setImageArrayBuffer] = useState(null)
  const [songInfo, setSongInfo] = useState({ title: "Title", artist: "Artist", album: "Album" })

  useEffect(async () => {
    if (router.query.v) {
      const response = await fetch("/api/details?id=" + router.query.v)

      if (response.status == 400) {
        console.log("The requested video was not found")
      }
      else {
        const video = await response.json()
        setVideo(video)
      }
    }
  }, [router.query])

  const downloadAudio = () => {
    setDownloading(true)
    var req = new XMLHttpRequest();
    req.open("GET", "/api/download/audio/" + router.query.v, true);
    req.responseType = "blob";

    req.onload = function (oEvent) {
      setAudioBlob(req.response);
      setShowDownload(false)
      setDownloading(false)
      // saveAs(blob, "Song.mp3")
    };

    req.send();
    console.log("send req")
  }

  const downloadVideo = () => {
    setDownloading(true)
    var req = new XMLHttpRequest();
    req.open("GET", "/api/download/video/" + router.query.v, true);
    req.responseType = "blob";

    req.onload = function (oEvent) {
      var blob = req.response;
      setDownloading(false)
      saveAs(blob, `${video?.title}.mp4`)
    };

    req.send();
    console.log("send req")
  }

  const setCoverImage = (e) => {
    const file = e.target.files[0];

    if (file) {
      const reader = new FileReader();
      reader.onload = function () {
        setImageArrayBuffer(reader.result);
      };
      reader.onerror = function () {
        console.error('Reader error', reader.error);
      };
      reader.readAsArrayBuffer(file);
    }
  }

  const arrayBufferToBase64 = (buffer) => {
    var binary = '';
    var bytes = new Uint8Array(buffer);
    var len = bytes.byteLength;
    for (var i = 0; i < len; i++) {
      binary += String.fromCharCode(bytes[i]);
    }
    return window.btoa(binary);
  }

  return (
    <>
      <Head>
        <title>Youtube Downloader</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="h-screen flex justify-center items-center bg-gray-50">
        <TagModal open={showTagModal} setOpen={setShowTagModal} audioBlob={audioBlob} setAudioBlob={setAudioBlob} imageArrayBuffer={imageArrayBuffer} setImageArrayBuffer={setImageArrayBuffer} songInfo={songInfo} setSongInfo={setSongInfo} />
        <div className="flex gap-12">

          <div className="flex flex-col justify-center bg-white p-10 rounded-md shadow-md">
            <h1 className="text-center mb-10">
              {video?.title}
            </h1>
            <img className="max-w-sm" src={video?.img} alt="" />
          </div>

          <div className="flex items-center justify-center bg-white p-10 rounded-md shadow-md">
            <div className={"flex flex-col gap-10" + (!showDownload ? " hidden" : "")}>

              <button type="button" onClick={() => downloadVideo()} className="inline-flex items-center px-3 py-2 border border-transparent shadow-sm text-sm leading-4 font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                Download Video
                <FilmIcon className="ml-2 -mr-0.5 h-4 w-4" aria-hidden="true" />
              </button>

              <button type="button" onClick={() => downloadAudio()} className="inline-flex items-center px-3 py-2 border border-transparent shadow-sm text-sm leading-4 font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                Download Audio
                <VolumeUpIcon className="ml-2 -mr-0.5 h-4 w-4" aria-hidden="true" />
              </button>

              <div className={"flex justify-center items-center" + (!downloading ? " hidden" : "")}>
                <div className="animate-spin inline-block w-8 h-8 border-4 rounded-full border-r-4 border-r-black" role="status">
                  <span className="hidden">Loading...</span>
                </div>
              </div>
            </div>

            <div className={"flex flex-col gap-10" + (showDownload ? " hidden" : "")} >
              <button type="button" onClick={() => setShowTagModal(true)} className="inline-flex items-center px-3 py-2 border border-transparent shadow-sm text-sm leading-4 font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                Modify Tags
                <PencilAltIcon className="ml-2 -mr-0.5 h-4 w-4" aria-hidden="true" />
              </button>

              <button type="button" onClick={() => saveAs(audioBlob, `${video?.title}.mp3`)} className="inline-flex items-center px-3 py-2 border border-transparent shadow-sm text-sm leading-4 font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                Download
                <DownloadIcon className="ml-2 -mr-0.5 h-4 w-4" aria-hidden="true" />
              </button>
            </div>

          </div>

          <div className={"flex flex-col justify-center bg-white p-10 rounded-md shadow-md text-center" + (showDownload ? " hidden" : "")}>
            <div className="bg-[#282828] flex justify-center items-center w-52 h-52">
              {
                imageArrayBuffer == null ?
                  (
                    <>
                      <svg role="img" height="83" width="83" viewBox="0 0 16 16" className="Svg-sc-1bi12j5-0 hDgDGI"><path fill="none" d="M16 0v16H0V0z"></path><path d="M14.25 4.162L9.005 1.134l.007 9.372a2.475 2.475 0 00-1.493-.507 2.503 2.503 0 00-2.5 2.5c0 1.379 1.122 2.5 2.5 2.5s2.5-1.121 2.5-2.5l-.013-9.632 3.744 2.162.5-.867zm-6.731 9.836c-.827 0-1.5-.673-1.5-1.5s.673-1.5 1.5-1.5 1.5.673 1.5 1.5-.673 1.5-1.5 1.5z"></path>
                      </svg>
                    </>
                  ) :
                  (
                    <>
                      <img src={("data:image/jpg;base64, " + arrayBufferToBase64(imageArrayBuffer))} alt="" />
                    </>
                  )
              }
              <input className="hidden" type="file" id="imageInput" onChange={(e) => setCoverImage(e)} />
            </div>
            <h2 className="mt-2">{songInfo.title}</h2>
            <h2>{`${songInfo.artist} - ${songInfo.album}`}</h2>
          </div>

        </div>
      </main>

    </>
  )
}
